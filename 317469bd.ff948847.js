(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{174:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return m}));var a=r(2),n=r(9),i=(r(0),r(313)),o={},l={id:"Module/Get-VSTeamGitCommit",isDocsHomePage:!1,title:"Get-VSTeamGitCommit",description:"Get-VSTeamGitCommit",source:"@site/docs\\Module\\Get-VSTeamGitCommit.md",permalink:"/docs/Module/Get-VSTeamGitCommit",editUrl:"https://github.com/MethodsAndPractices/vsteam-docs/edit/master/website/docs/Module/Get-VSTeamGitCommit.md"},c=[{value:"SYNOPSIS",id:"synopsis",children:[]},{value:"SYNTAX",id:"syntax",children:[]},{value:"DESCRIPTION",id:"description",children:[]},{value:"EXAMPLES",id:"examples",children:[{value:"-------------------------- EXAMPLE 1 --------------------------",id:"---------------------------example-1---------------------------",children:[]}]},{value:"PARAMETERS",id:"parameters",children:[{value:"-ProjectName",id:"-projectname",children:[]},{value:"-RepositoryId",id:"-repositoryid",children:[]},{value:"-FromDate",id:"-fromdate",children:[]},{value:"-ToDate",id:"-todate",children:[]},{value:"-ItemVersionVersionType",id:"-itemversionversiontype",children:[]},{value:"-ItemVersionVersion",id:"-itemversionversion",children:[]},{value:"-ItemVersionVersionOptions",id:"-itemversionversionoptions",children:[]},{value:"-CompareVersionVersionType",id:"-compareversionversiontype",children:[]},{value:"-CompareVersionVersion",id:"-compareversionversion",children:[]},{value:"-CompareVersionVersionOptions",id:"-compareversionversionoptions",children:[]},{value:"-FromCommitId",id:"-fromcommitid",children:[]},{value:"-ToCommitId",id:"-tocommitid",children:[]},{value:"-Author",id:"-author",children:[]},{value:"-Ids",id:"-ids",children:[]},{value:"-ItemPath",id:"-itempath",children:[]},{value:"-ExcludeDeletes",id:"-excludedeletes",children:[]},{value:"-Top",id:"-top",children:[]},{value:"-Skip",id:"-skip",children:[]},{value:"-HistoryMode",id:"-historymode",children:[]},{value:"-User",id:"-user",children:[]}]},{value:"INPUTS",id:"inputs",children:[]},{value:"OUTPUTS",id:"outputs",children:[]},{value:"NOTES",id:"notes",children:[]},{value:"RELATED LINKS",id:"related-links",children:[]}],s={rightToc:c};function m(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"get-vsteamgitcommit"},"Get-VSTeamGitCommit"),Object(i.b)("h2",{id:"synopsis"},"SYNOPSIS"),Object(i.b)("p",null,"Retrieve git commits for a project"),Object(i.b)("h2",{id:"syntax"},"SYNTAX"),Object(i.b)("h2",{id:"description"},"DESCRIPTION"),Object(i.b)("p",null,"The Get-VSTeamGitCommit function gets the commits for a git repository."),Object(i.b)("h2",{id:"examples"},"EXAMPLES"),Object(i.b)("h3",{id:"---------------------------example-1---------------------------"},"-------------------------- EXAMPLE 1 --------------------------"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-PowerShell"}),"PS C:\\> Get-VSTeamGitCommit -ProjectName demo -RepositoryId 118C262F-0D4C-4B76-BD9B-7DD8CA12F196\n")),Object(i.b)("p",null,"This command gets a list of all commits in the demo project for a specific repository."),Object(i.b)("h2",{id:"parameters"},"PARAMETERS"),Object(i.b)("h3",{id:"-projectname"},"-ProjectName"),Object(i.b)("p",null,"Specifies the team project for which this function operates."),Object(i.b)("p",null,"You can tab complete from a list of available projects."),Object(i.b)("p",null,"You can use Set-VSTeamDefaultProject to set a default project so\nyou do not have to pass the ProjectName with each call."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nPosition: 0\nRequired: True\nAccept pipeline input: true (ByPropertyName)\n")),Object(i.b)("h3",{id:"-repositoryid"},"-RepositoryId"),Object(i.b)("p",null,"The id or friendly name of the repository. To use the friendly name, projectId must also be specified."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: Guid\nRequired: True\nAccept pipeline input: true (ByPropertyName)\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath, ByIds\n")),Object(i.b)("h3",{id:"-fromdate"},"-FromDate"),Object(i.b)("p",null,"If provided, only include history entries created after this date (string)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: DateTime\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-todate"},"-ToDate"),Object(i.b)("p",null,"If provided, only include history entries created before this date (string)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: DateTime\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-itemversionversiontype"},"-ItemVersionVersionType"),Object(i.b)("p",null,"Version type (branch, tag, or commit). Determines how Id is interpreted. The acceptable values for this parameter are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"branch"),Object(i.b)("li",{parentName:"ul"},"commit"),Object(i.b)("li",{parentName:"ul"},"tag")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-itemversionversion"},"-ItemVersionVersion"),Object(i.b)("p",null,"Version string identifier (name of tag/branch, SHA1 of commit)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-itemversionversionoptions"},"-ItemVersionVersionOptions"),Object(i.b)("p",null,"Version options - Specify additional modifiers to version (e.g Previous). The acceptable values for this parameter are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"firstParent"),Object(i.b)("li",{parentName:"ul"},"none"),Object(i.b)("li",{parentName:"ul"},"previousChange")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-compareversionversiontype"},"-CompareVersionVersionType"),Object(i.b)("p",null,"Version type (branch, tag, or commit). Determines how Id is interpreted. The acceptable values for this parameter are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"branch"),Object(i.b)("li",{parentName:"ul"},"commit"),Object(i.b)("li",{parentName:"ul"},"tag")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-compareversionversion"},"-CompareVersionVersion"),Object(i.b)("p",null,"Version string identifier (name of tag/branch, SHA1 of commit). The acceptable values for this parameter are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"firstParent"),Object(i.b)("li",{parentName:"ul"},"none"),Object(i.b)("li",{parentName:"ul"},"previousChange")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-compareversionversionoptions"},"-CompareVersionVersionOptions"),Object(i.b)("p",null,"Version options - Specify additional modifiers to version (e.g Previous)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-fromcommitid"},"-FromCommitId"),Object(i.b)("p",null,"If provided, a lower bound for filtering commits alphabetically"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-tocommitid"},"-ToCommitId"),Object(i.b)("p",null,"If provided, an upper bound for filtering commits alphabetically"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-author"},"-Author"),Object(i.b)("p",null,"Alias or display name of the author"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-ids"},"-Ids"),Object(i.b)("p",null,"If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: ByIds\n")),Object(i.b)("h3",{id:"-itempath"},"-ItemPath"),Object(i.b)("p",null,"Path of item to search under"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemPath\n")),Object(i.b)("h3",{id:"-excludedeletes"},"-ExcludeDeletes"),Object(i.b)("p",null,"Only applies when an itemPath is specified. This determines whether to exclude delete entries of the specified path."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: Switch\nParameter Sets: All, ItemPath\n")),Object(i.b)("h3",{id:"-top"},"-Top"),Object(i.b)("p",null,"Maximum number of entries to retrieve"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: Int32\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-skip"},"-Skip"),Object(i.b)("p",null,"Number of entries to skip"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: Int32\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h3",{id:"-historymode"},"-HistoryMode"),Object(i.b)("p",null,"What Git history mode should be used. This only applies to the search criteria when Ids = null and an itemPath is specified. The acceptable values for this parameter are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"firstParent"),Object(i.b)("li",{parentName:"ul"},"fullHistory"),Object(i.b)("li",{parentName:"ul"},"fullHistorySimplifyMerges"),Object(i.b)("li",{parentName:"ul"},"simplifiedHistory")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: ItemPath\n")),Object(i.b)("h3",{id:"-user"},"-User"),Object(i.b)("p",null,"Alias or display name of the committer"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"Type: String\nParameter Sets: All, ItemVersion, CompareVersion, ItemPath\n")),Object(i.b)("h2",{id:"inputs"},"INPUTS"),Object(i.b)("h2",{id:"outputs"},"OUTPUTS"),Object(i.b)("h2",{id:"notes"},"NOTES"),Object(i.b)("p",null,"This function has a Dynamic Parameter for ProjectName that specifies the project for which this function gets commits."),Object(i.b)("p",null,"You can tab complete from a list of available projects."),Object(i.b)("p",null,"You can use Set-VSTeamDefaultProject to set a default project so you do not have to pass the ProjectName with each call."),Object(i.b)("p",null,"You can pipe a repository ID to this function."),Object(i.b)("h2",{id:"related-links"},"RELATED LINKS"))}m.isMDXComponent=!0},313:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return d}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=n.a.createContext({}),m=function(e){var t=n.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=m(e.components);return n.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=m(r),u=a,d=p["".concat(o,".").concat(u)]||p[u]||b[u]||i;return r?n.a.createElement(d,l(l({ref:t},s),{},{components:r})):n.a.createElement(d,l({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);